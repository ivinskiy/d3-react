import type { NextPage } from "next";
import * as d3 from "d3";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { testData } from "../src/util/testData";
import { useEffect, useState, useRef } from "react";
import { BaseType, NumberValue } from "d3";

const initialData = [
  {
    name: "Car",
    value: 10,
  },
  {
    name: "Food",
    value: 3,
  },
  {
    name: "Telephone",
    value: 9,
  },
  {
    name: "Electricity",
    value: 7,
  },
  {
    name: "Cinema",
    value: 7,
  },
];

const Home: NextPage = () => {
  const [chartData, setChartData] = useState(initialData);
  const svgRef = useRef<BaseType | SVGSVGElement>(null);

  const width = 500;
  const height = 150;
  const padding = 20;
  const maxValue = 20;

  const newData = () => {
    return chartData.map((d) => {
      d.value = Math.floor(Math.random() * (maxValue + 1));
      return d;
    });
  };

  useEffect(() => {
    const xScales = d3
      .scalePoint()
      .domain(chartData.map((d) => d.name))
      .range([0 + padding, width - padding]);

    const yScales = d3
      .scaleLinear()
      .domain([0, d3.max(chartData, (d) => d.value as any)])
      .range([height - padding, 0 + padding]);

    const line = d3
      .line()
      .x((d) => xScales(d.name as any))
      .y((d) => yScales(d.value as any))
      .curve(d3.curveMonotoneX);

    d3.select(svgRef.current as BaseType)
      .select("path")
      .transition()
      .duration(1000)
      .attr("d", () => line(chartData as any))
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-dasharray", width + " " + width + padding)
      .attr("stroke-dashoffset", width)
      .transition()
      .duration(2000)
      .attr("stroke-dashoffset", 0);

    // d3.select(svgRef.current as BaseType).select("path");

    const xAxis = d3.axisBottom(xScales);
    const yAxis = d3.axisLeft(yScales);
    d3.select("#xaxis").remove();
    d3.select(svgRef.current as BaseType)
      .append("g")
      .attr("transform", `translate(0, ${height - padding})`)
      .attr("id", "xaxis")
      .attr("color", "white")
      .call(xAxis);

    d3.select("#yaxis").remove();
    d3.select(svgRef.current as BaseType)
      .append("g")
      .attr("transform", `translate(${padding}, 0)`)
      .attr("id", "yaxis")
      .attr("color", "white")
      .call(yAxis);
  }, [chartData]);

  return (
    <div className={styles.container}>
      <Head>
        <title>D3 and Next</title>
        <meta name="description" content="Generated by D3 and Next" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to D3 and NextJS!</h1>
        <div className={styles.chartContainer}>
          <svg id="chart" viewBox="0 0 500 150" ref={svgRef as any}>
            <path
              d="M50,50 L100,150"
              fill="none"
              stroke="white"
              strokeWidth="5"
            />
          </svg>
          <button type="button" onClick={() => setChartData(newData())}>
            Chart data
          </button>
        </div>
      </main>
    </div>
  );
};

export default Home;
